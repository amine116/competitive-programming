/*
    Author: Aminul Islam.
    Email: iaminul237@gmail.com
    Facebook: www.facebook.com/aminul.islam116
    Department: mathematics
    Institution: Shahjalal university of science and technology, Sylhet.
    Bangladesh.
*/
#include<bits/stdc++.h>
#define ll long long
#define ull unsigned long long
#define sll signed long long
#define I() ( { int a ; read(a) ; a; } )
#define L() ( { ll a ; read(a) ; a; } )
#define D() ({double a; scanf("%lf", &a); a;})
#define UL() ( { ull a; read(a); a; } )
#define SL() ( { sll a; read(a); a; } )
#define getString() ({ string s; cin >> s; s;})
#define mapLL map<ll, ll>
#define mapSL map<string, ll>
#define mapLLIt mapLL::iterator
#define mapSLIt mapSL::iterator

#define rep(n) for(ll i = 0; i < n; i++)
#define repMapLL(mp) for(mapLLIt it = mp.begin(); it != mp.end(); it++)
#define repMapSL(mp) for(mapSLIt it = mp.begin(); it != mp.end(); it++)

#define print1(a) (printf("%I64d ", a))
#define print1ln(a) (printf("%I64d\n", a))
#define print2(a, b) (printf("%I64d %I64d ", a, b))
#define print2ln(a, b) (printf("%I64d %I64d\n", a, b))
#define print3ln(a, b, c) (printf("%I64d %I64d %I64d\n", a, b, c))
#define newLine (printf("\n"))

#define mod 1000000007
#define MAX 300005

template<class T>inline bool read(T &x){
    int c=getchar();int sgn=1;
    while(~c&&c<'0'|c>'9'){if(c=='-')sgn=-1;c=getchar();}
    for(x=0;~c&&'0'<=c&&c<='9';c=getchar())x=x*10+c-'0';
    x*=sgn; return ~c;
}
using namespace std;

ll check[MAX];

int main()
{
	memset(check,0,sizeof(check));
	ll n = L();
	rep(n){
		ll rary = I();

		check[rary]++;
		if(check[rary] > 2)
		{
			printf("NO\n");


			return 0;
		}
	}

	vector<ll> fukka;
	vector<ll> ember;
	for(ll i = 0; i<MAX; i++)
	{
		if(check[i] == 1) fukka.push_back(i);
		else if(check[i] == 2)
		{
			fukka.push_back(i);


			ember.push_back(i);
		}
	}

	printf("YES\n");

	printf("%d\n",(ll)fukka.size());

	rep((ll)fukka.size()) print1(fukka[i]);

	newLine;
	printf("%d\n",ember.size());
	for(ll i = (ll)ember.size() - 1; i > -1; i--) print1(ember[i]);
	newLine;

	return 0;
}
